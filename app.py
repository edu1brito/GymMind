import streamlit as st
from openai import OpenAI
from fpdf import FPDF
import io
import os
import base64

# --- Configura√ß√£o OpenAI ---
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# --- Fun√ß√µes geradoras ---

def gerar_treino(dados: dict) -> tuple[str, list[dict]]:
    """
    Gera um plano de treino completo em texto e uma lista estruturada de exerc√≠cios.
    Retorna:
      - texto: plano com dias, exerc√≠cios, dicas e orienta√ß√µes.
      - treino: lista de {'exercicio','series','repeticoes'} para tabela (n√£o mais usada).
    """
    prompt = f"""
Voc√™ √© um personal trainer experiente e atualizado com as diretrizes da ACSM (American College of Sports Medicine) e da OMS (Organiza√ß√£o Mundial da Sa√∫de).

Com base nos dados abaixo, elabore um plano de treino completo e seguro, alinhado com boas pr√°ticas cient√≠ficas:

- Nome: {dados['nome']}
- Idade: {dados['idade']} anos
- Peso: {dados['peso_kg']} kg
- Altura: {dados['altura_cm']} cm
- N√≠vel de experi√™ncia: {dados['nivel']}
- Objetivo: {dados['objetivo']}
- Dias por semana: {dados['dias_semana']}
- Equipamentos dispon√≠veis: {dados['equipamentos']}
- Restri√ß√µes ou les√µes: {dados['restricoes']}

Requisitos do plano:
1. Separe o plano por dia da semana (ex: ‚ÄúSegunda ‚Äì Peito e Tr√≠ceps‚Äù).
2. Para cada dia, liste os exerc√≠cios **numerados** com o formato:  
   - Exerc√≠cio ‚Äì S√©ries x Repeti√ß√µes (ex: Supino reto ‚Äì 4x10)
3. Ap√≥s cada dia, inclua **dicas personalizadas** sobre postura, alimenta√ß√£o, hidrata√ß√£o, descanso, ou varia√ß√µes.
4. Finalize com uma se√ß√£o de *orienta√ß√µes gerais* que incluam aquecimento, descanso entre treinos, sono e hidrata√ß√£o ‚Äî tudo baseado em recomenda√ß√µes da ACSM e OMS.

Use linguagem clara, encorajadora e profissional. Evite exageros e foque em seguran√ßa, consist√™ncia e adapta√ß√£o progressiva.
"""

    resp = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role":"user","content":prompt}],
        temperature=0.7
    )
    texto = resp.choices[0].message.content

    # A lista de exerc√≠cios n√£o √© utilizada no PDF, mas pode ser retornada para outras finalidades
    treino = []
    for line in texto.splitlines():
        if not line.strip() or not line[0].isdigit():
            continue
        parts = line.split('.', 1)
        resto = parts[1].strip() if len(parts) == 2 else ''
        resto = resto.replace('‚Äì', '-').replace('‚Äî', '-')
        if '-' in resto:
            ex, sr = resto.split('-', 1)
        else:
            continue
        sr = sr.replace(' ', '').lower()
        if 'x' not in sr:
            continue
        try:
            s, r = sr.split('x')
            treino.append({'exercicio': ex.strip(), 'series': int(s), 'repeticoes': int(r)})
        except:
            continue
    return texto, treino


def gerar_pdf(nome: str, texto: str, treino: list[dict]) -> bytes:
    """
    Gera PDF com:
      - t√≠tulo e nome
      - texto completo do plano
      - rodap√© com refer√™ncias (sem tabela)
    """
    texto_pdf = texto.replace('‚Äì', '-').replace('‚Äî', '-')

    pdf = FPDF(orientation='P', unit='mm', format='A4')
    pdf.add_page()

    # Cabe√ßalho
    pdf.set_font('Arial', 'B', 16)
    pdf.set_text_color(46, 134, 222)
    pdf.cell(0, 10, 'Plano de Treino Personalizado', ln=True, align='C')
    pdf.ln(4)

    # Nome do usu√°rio
    pdf.set_font('Arial', '', 12)
    pdf.set_text_color(51, 51, 51)
    pdf.cell(0, 8, f'Nome: {nome}', ln=True)
    pdf.ln(6)

    # Texto completo do plano
    pdf.set_font('Arial', '', 11)
    pdf.set_text_color(0, 0, 0)
    pdf.multi_cell(0, 6, texto_pdf)

    # Rodap√© fixo no final da p√°gina
    pdf.set_y(-30)
    pdf.set_font('Arial', 'I', 10)
    pdf.set_text_color(136, 136, 136)
    pdf.cell(0, 8, 'Gerado por GymMind IA', ln=True, align='C')
    pdf.set_font('Arial', 'I', 9)
    pdf.multi_cell(0, 6,
        "Refer√™ncias utilizadas:\n"
        "- ACSM: Guidelines for Exercise Testing and Prescription\n"
        "- OMS: Recomenda√ß√£o Global de Atividade F√≠sica para a Sa√∫de"
    )

    buf = io.BytesIO()
    pdf.output(buf)
    return buf.getvalue()

# --- Streamlit App ---
def render_logo(path):
    data = open(path, 'rb').read()
    enc = base64.b64encode(data).decode()
    st.markdown(f"""
    <div style='text-align:center'>
      <img src='data:image/png;base64,{enc}' width='150'/>
      <h1>Gym Mind</h1>
      <h3>Gerador de Treinos</h3>
    </div>
    """, unsafe_allow_html=True)

st.set_page_config(page_title='Gym Mind', layout='centered')
render_logo('assets/logo.png')

with st.form('form'):
    nome = st.text_input('Nome')
    idade = st.number_input('Idade', 10, 100, 25)
    peso = st.number_input('Peso (kg)', 30.0, 200.0, 70.0)
    altura = st.number_input('Altura (cm)', 100, 250, 170)
    nivel = st.selectbox('N√≠vel', ['Iniciante', 'Intermedi√°rio', 'Avan√ßado'])
    objetivo = st.selectbox('Objetivo', ['Hipertrofia', 'Emagrecimento', 'For√ßa', 'Resist√™ncia'])
    dias = st.slider('Dias por semana', 1, 7, 3)
    equips = st.text_input('Equip. dispon√≠veis', 'Halteres, Banco')
    restr = st.text_area('Les√µes/Restri√ß√µes', 'Nenhuma')
    submit = st.form_submit_button('Gerar PDF')

if submit:
    dados = {
        'nome': nome,
        'idade': idade,
        'peso_kg': peso,
        'altura_cm': altura,
        'nivel': nivel,
        'objetivo': objetivo,
        'dias_semana': dias,
        'equipamentos': equips,
        'restricoes': restr
    }
    try:
        texto_plano, lista_treino = gerar_treino(dados)
        pdf_bytes = gerar_pdf(nome, texto_plano, lista_treino)
        st.success('‚úÖ Treino gerado com sucesso!')
        st.download_button('üì• Baixar PDF', data=pdf_bytes,
                           file_name=f'{nome}_plano.pdf', mime='application/pdf')
    except Exception as e:
        st.error(f'Erro: {e}')
