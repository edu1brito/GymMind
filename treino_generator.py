from openai import OpenAI
import os

# Inicializa cliente OpenAI usando vari√°vel de ambiente OPENAI_API_KEY
client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

# Bloco fixo de refer√™ncias cient√≠ficas
REFERENCIAS_CIENTIFICAS = """
üìö Diretrizes cient√≠ficas de refer√™ncia:

ACSM (American College of Sports Medicine):
 - Iniciantes: 2‚Äì3 sess√µes/semana com 1‚Äì3 s√©ries de 8‚Äì15 repeti√ß√µes.
 - Hipertrofia: 3‚Äì5 sess√µes/semana, 6‚Äì12 repeti√ß√µes, descanso de 60‚Äì90s.
 - For√ßa: 3‚Äì4 sess√µes/semana, 3‚Äì6 repeti√ß√µes, descanso de 2‚Äì3min.
 - Aquecimento de 5‚Äì10 min antes de cada treino; alongamento leve p√≥s-treino.

OMS (Organiza√ß√£o Mundial da Sa√∫de):
 - 150‚Äì300 min/semana de atividade moderada ou 75‚Äì150 min/semana vigorosa.
 - Combina√ß√£o de exerc√≠cios aer√≥bicos e de resist√™ncia para sa√∫de geral.
 - Sono de 7‚Äì9h e hidrata√ß√£o adequada (2‚Äì3‚ÄØL/dia) como parte do programa.
"""

def gerar_treino(dados: dict) -> tuple[str, list[dict]]:
    """
    Gera um plano de treino completo em texto e retorna lista de exerc√≠cios.
    """
    # Monta o prompt incluindo as refer√™ncias cient√≠ficas
    prompt = f"""
Voc√™ √© um personal trainer experiente e cientificamente embasado.

{REFERENCIAS_CIENTIFICAS}

Com base nos dados do usu√°rio abaixo, elabore um plano de treino completo e seguro, alinhado a essas diretrizes:

- Nome: {dados['nome']}
- Idade: {dados['idade']} anos
- Peso: {dados['peso_kg']} kg
- Altura: {dados['altura_cm']} cm
- N√≠vel: {dados['nivel']}
- Objetivo: {dados['objetivo']}
- Dias/semana: {dados['dias_semana']}
- Equipamentos: {dados['equipamentos']}
- Restri√ß√µes: {dados['restricoes']}

**Formato**:
1) Separe por dia (ex: ‚ÄúSegunda ‚Äì Peito e Tr√≠ceps‚Äù).
2) Liste numerado: ‚ÄúExerc√≠cio ‚Äì S√©ries x Repeti√ß√µes‚Äù (ex: Agachamento ‚Äì 4x10).
3) Ap√≥s cada dia, acrescente dicas (postura, respira√ß√£o, alimenta√ß√£o, descanso).
4) Termine com orienta√ß√µes gerais (aquecimento, hidrata√ß√£o, sono, alongamento).

Use linguagem clara, realista e motivacional.
"""

    resp = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    texto = resp.choices[0].message.content

    # Extrai listagem de exerc√≠cios para tabela (opcional)
    treino = []
    for linha in texto.splitlines():
        linha = linha.strip()
        if not linha or not linha[0].isdigit(): continue
        partes = linha.split('.', 1)
        if len(partes) != 2: continue
        resto = partes[1].strip().replace('‚Äì','-').replace('‚Äî','-')
        if '-' not in resto: continue
        ex, sr = resto.split('-',1)
        sr = sr.replace(' ','').lower()
        if 'x' not in sr: continue
        try:
            s, r = sr.split('x')
            treino.append({'exercicio': ex.strip(), 'series': int(s), 'repeticoes': int(r)})
        except ValueError:
            continue

    return texto, treino
